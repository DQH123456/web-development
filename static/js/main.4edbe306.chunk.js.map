{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","focus","ref","inp","onChange","onKeyDown","type","onClick","Component","Todoing","todo","map","item","idx","key","del","defaultProps","Todolist","addItem","data","delItem","splice","ReactDOM","render","document","getElementById","className"],"mappings":"oQAIqBA,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAY,SAACC,GAEQ,KAAdA,EAAEC,SAED,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAbnB,EAgBbC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAMC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAhB5D,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAO,CACRC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAsBTC,QAAQC,IAAIC,KAAKC,KAAKN,GACtBK,KAAKC,KAAKN,EAAEO,U,+BAEN,IAAD,OACL,OACI,6BACI,2BAAOC,IAAK,SAACC,GAAO,EAAKT,EAAES,GAAMb,KAAK,IAAIc,SAAUL,KAAKX,aAAcD,MAAOY,KAAKN,MAAMC,EAAGW,UAAWN,KAAKlB,YAAayB,KAAK,SADlI,IAGI,2BAAOhB,KAAK,IAAIc,SAAUL,KAAKX,aAAcD,MAAOY,KAAKN,MAAME,EAAGU,UAAWN,KAAKlB,YAAayB,KAAK,SAHxG,IAKI,2BAAOhB,KAAK,IAAIc,SAAUL,KAAKX,aAAcD,MAAOY,KAAKN,MAAMG,EAAGS,UAAWN,KAAKlB,YAAayB,KAAK,SALxG,IAOI,2BAAIP,KAAKN,MAAMC,EAAEK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAKzC,2BAAOM,IAAK,SAACC,GAAO,EAAKA,IAAMA,GAAMG,KAAK,SAC1C,4BAAQC,QAAS,WAAKV,QAAQC,IAAI,EAAKK,IAAIhB,SAA3C,qB,GAzCuBqB,aCDlBC,E,iLACP,IAAD,OACAC,EAAQX,KAAKf,MAAb0B,KACL,OACI,4BAGQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACT,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQL,QAAS,kBAAI,EAAKvB,MAAM+B,IAAIF,KAApC,yB,GATIL,aAoBrCC,EAAQO,aAAa,CACjBN,KAAK,CAAC,EAAE,EAAE,EAAE,I,ICpBKO,E,YACjB,aAAc,IAAD,8BACT,+CAsBJC,QAAU,SAACC,GAEP,EAAK9B,SAAS,CACVqB,KAAK,GAAD,mBAAM,EAAKjB,MAAMiB,MAAjB,CAAsBS,OA1BrB,EA6BbC,QAAU,SAACP,GAEP,IAAIH,EAAI,YAAO,EAAKjB,MAAMiB,MAC1BA,EAAKW,OAAOR,EAAI,GAEhB,EAAKxB,UAAS,SAACI,EAAMT,GAEjB,OADAa,QAAQC,IAAIL,EAAMiB,MACX,CACHA,KAAMA,OAnCd,EAAKjB,MAAQ,CACTiB,KAAK,CAAC,EAAE,EAAE,GACVhB,EAAE,IACFC,EAAE,KALG,E,sEAmDT,OACI,6BACI,kBAAC,EAAD,CAAWV,IAAKc,KAAKmB,UACrB,kBAAC,EAAD,CAASH,IAAKhB,KAAKqB,QAASV,KAAMX,KAAKN,MAAMiB,Y,GAvDvBF,aCEtCc,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAGlBD,SAASC,eAAe,QAC9BC,UAAY,W","file":"static/js/main.4edbe306.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n//受控组件：value值被react 控制的表单元素\r\n//可以实时获取表单元素的值（表单验证），\r\n\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state=({\r\n            a:\"\",\r\n            b:\"\",\r\n            c:\"\"\r\n        })\r\n    }\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            //console.log(e.target.value);  //控制台输出\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===\"\"?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.refs.a);\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* <p>{parseInt(this.state.a===\"\"?0:this.state.a)+parseInt(this.state.b===\"\"?0:this.state.b)+parseInt(this.state.c===\"\"?0:this.state.c)}</p> */}\r\n                {/* 此时24行可以用： [e.target.name]:e.target.value*/}\r\n\r\n                {/*非受控组件:一次性获取或处理表单元素的值*/}\r\n                <input ref={(inp)=>{this.inp = inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n/**\r\n * 受控组件：\r\n * 1.给input标签添加value属性，赋值为state的值\r\n * 2.给input标签绑定onChange事件\r\n * 在事件处理函数中setState\r\n * 3.一个事件处理函数控制多个表单元素时\r\n * 给input标签加上name属性\r\n * setState({[e.target.name]:e.target.value})\r\n */","    \r\nimport React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    //todo.map((item)=>{return <li>{item}</li>})\r\n                    todo.map((item,idx)=>\r\n                    <li key={idx}>\r\n                        {item}---<button onClick={()=>this.props.del(idx)}>删除</button>\r\n                    </li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps={\r\n    todo:[1,2,3,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        this.setState({\r\n            todo: [...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx)=>{\r\n        // 1、不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        // 2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return {\r\n                todo: todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Todolist from './Todolist/Todolist';\r\n\r\n\r\nReactDOM.render(\r\n    <Todolist/>,\r\n    document.getElementById('root')\r\n)\r\n\r\nvar div = document.getElementById('root');\r\ndiv.className = 'active';"],"sourceRoot":""}